/* Name         : Goutami Padmanabhan
 * UTA ID       : 1001669338
 * Course       : CSE 5306 - Distributed Systems
 * Program Name : Server
 * Language     : Java
 * GUI          : Swing JFrame
 * Purpose      : To create a Server from the Client-Server Architecture
 * 
 * References:
 * https://www.youtube.com/watch?v=YSpqHOwYrk4
 * https://github.com/VijaiV36/Chat/blob/master/DS%20Project/src/DSProject/Client.java
 * https://github.com/VijaiV36/Chat/blob/master/DS%20Project/src/DSProject/Server.java
 * https://www.geeksforgeeks.org/multi-threaded-chat-application-set-1/
 * https://www.geeksforgeeks.org/multi-threaded-chat-application-set-2/
 *
*/
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dslab1;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import static dslab1.Server.userName;
import java.util.Scanner;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.swing.JOptionPane;

/**
 *
 * @author Goutami
 */
public class Server extends javax.swing.JFrame {
    /*Declare the variables used in this class*/
    static String userName; // User name variable
    static InetAddress ip; // referring ip Inet address
    static Socket sock; // Socket reference
    static DataInputStream dis; // referring Data Input Stream
    static DataOutputStream dos; // referring Data Output Stream
    final static int ServerPort = 7654; // Server port initialization
    static ServerSocket serverSocket; // Variable referring server's socket
    static int i = 0; // counter for the clients
    /* End of declaration */

    /**
     * Creates new form Server
     */
    public Server() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setBackground(new java.awt.Color(255, 153, 0));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jButton1.setText("Stop");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(150, 150, 150)
                        .addComponent(jButton1)
                        .addGap(0, 151, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(9, 9, 9))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        // This stop button is used to Stop the server and exit
        JOptionPane.showMessageDialog(null,"Stopping Server");
        System.out.println("Server has stopped");
        System.exit(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    /* Declaring a client handler to handle each and every active client using ClientHandler class */
    // Vector to store active clients
    static Vector<ClientHandler> ar = new Vector<>();
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server().setVisible(true);
            }
        });
        
        try {
            // We consider ArrayList to store the list of Client user names.
            ArrayList<String> clientUserList = new ArrayList<>();
            // We are giving the socket with the port number in order to connect to client
            serverSocket = new ServerSocket(ServerPort);
            while(true) {
                // After binding the server socket, the socket is now ready for connecting with clients
                sock = serverSocket.accept();
                jTextArea1.append("\nNew Client connection request received : " + sock); 
                jTextArea1.append(""+sock.getInetAddress());
                dis = new DataInputStream(sock.getInputStream());
                dos = new DataOutputStream(sock.getOutputStream());
                jTextArea1.append("\nCreating Client handler");
                userName = dis.readUTF();
                // if duplicate user name exists, server passes the message to client and rejects the connection and client exits
                if(clientUserList.contains(userName)) { 
                    dos.writeUTF("Client already exists");
                } else {
                    // // if new user, server accepts the connection and new cliebnt handler created
                    System.out.println(userName);
                    clientUserList.add(userName);
                    jTextArea1.append("\nNew client connection request received : \n " + sock+ " "+userName);
                    jTextArea1.append("\n"+" Connected"+"\n" );
                    jTextArea1.append("\nNew handler. Adding this client to active client list");
                    
                    // client handler created here, passing the port, client name, input and output streams
                    ClientHandler mtch = new ClientHandler(sock,"client " + i, dis, dos,userName);
                    Thread t = new Thread(mtch); // new thread object created
                    jTextArea1.append("\nAdding this client to active client list");
                    ar.add(mtch);
                    t.start(); // The start() method is invoked on this newly created thread object. New thread starts
                    i++;
                    
                    // Displays the list of active users
                    jTextArea1.append("\nList of active users\n");
                    for(String s: clientUserList) {
                        jTextArea1.append(s+"\n");
                    }                    
                }
            }
        } catch(Exception e){}
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}

// ClientHandler class 
/*
 * References:
 * https://www.youtube.com/watch?v=YSpqHOwYrk4
 * https://github.com/VijaiV36/Chat/blob/master/DS%20Project/src/DSProject/Client.java
 * https://github.com/VijaiV36/Chat/blob/master/DS%20Project/src/DSProject/Server.java
 * https://www.geeksforgeeks.org/multi-threaded-chat-application-set-1/
 * https://www.geeksforgeeks.org/multi-threaded-chat-application-set-2/
*/
class ClientHandler implements Runnable  
{ 
    Scanner scn = new Scanner(System.in); 
    private String clientName; 
    final DataInputStream dis; 
    final DataOutputStream dos; 
    Socket sock; 
    boolean isloggedin; 
    String userName;
    String received;
      
    // constructor 
    public ClientHandler(Socket sock, String clientName, 
                            DataInputStream dis, DataOutputStream dos, String userName) { 
        this.dis = dis; 
        this.dos = dos; 
        this.clientName = userName; 
        this.sock = sock; 
        this.isloggedin=true; 
        this.userName=userName;
    } 
  
    @Override
    public void run() { 
  
        while (this.isloggedin)  
        { 
            try
            { 
                // receive the string 
                received = dis.readUTF(); // Message is received, read and displayed in the output stream
                  
                System.out.println(received);
                
                DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
                LocalDateTime now = LocalDateTime.now();
                
                if(received.equals("logout")){ // If the received message from client is to log out, then the client is logged out of the system and socket is closed
                    this.isloggedin=false; 
                    this.sock.close(); // Socket is closed
                    System.out.println(this.clientName +" has logged out");
                    break; 
                } 

                // break the string into message and recipient part 
                StringTokenizer st = new StringTokenizer(received, "#"); 
                String MsgToSend = st.nextToken(); 
                String recipient = st.nextToken(); 
  
                // search for the recipient in the connected devices list. 
                // ar is the vector storing client of active users 
                if(recipient.equals("all")) {
                    for (ClientHandler mc : Server.ar) {
                        if(!mc.clientName.equals(this.clientName)) {
                            mc.dos.writeUTF(this.clientName+" : "+MsgToSend+"\n *** 1-to-all message ***");
                        }
                    }
                    // If STATUS is OK then HTTP message displayed in HTTP format
                    String httpmsg="Request Method : POST\nHost :"+sock+"\nUser-Agent : Mozilla/5.0 (Windows 10.0; Win64; x64; rv:47:0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103"
                        +"\nStatus Code : 200\nStatus: HTTP/1.0 200 OK "
                        + "\nContent-type : text/html"
                        +"Content-length : "+received.length() +"\nDate : "+dtf.format(now)+"\nContent : "+userName+" : "+received;
                System.out.println(httpmsg);
                } else {
                    int j = 0;
                    for (ClientHandler mc : Server.ar) {
                        if (mc.clientName.equals(recipient) && mc.isloggedin == true) {
                            mc.dos.writeUTF(this.clientName+" : "+MsgToSend+"\n *** 1-to-1 message ***");
                            String httpmsg="Request Method : POST\nHost :"+sock+"\nUser-Agent : Mozilla/5.0 (Windows 10.0; Win64; x64; rv:47:0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103"
                                +"\nStatus Code : 200\nStatus: HTTP/1.0 200 OK "
                                + "\nContent-type : text/html"
                                +"Content-length : "+received.length() +"\nDate : "+dtf.format(now)+"\nContent : "+userName+" : "+received;
                            System.out.println(httpmsg);
                            break;
                        }
                    }
                    if(j == 0) {
                        String httpmsg="Request Method : POST\nHost :"+sock+"\nUser-Agent : Mozilla/5.0 (Windows 10.0; Win64; x64; rv:47:0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103"
                            +"\nStatus Code : 404\nStatus: HTTP/1.0 404 Not Found "
                            + "\nContent-type : text/html"
                            +"Content-length : "+received.length() +"\nDate : "+dtf.format(now)+"\nContent : "+userName+" : "+received;
                        System.out.println(httpmsg);
                    }
                } 
            } catch (IOException e) { 
            } 
              
        } 
        try
        { 
            // closing resources 
            this.dis.close(); 
            this.dos.close(); 
              
        }catch(IOException e){ 
        } 
    } 
} 
